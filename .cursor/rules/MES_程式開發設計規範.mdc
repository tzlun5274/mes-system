---
description: 
globs: 
alwaysApply: true

# MES 製造執行系統 - 程式開發設計規範

---

## 一、專案概述

### 專案名稱
MES 製造執行系統 (Manufacturing Execution System)

### 專案目標
建立一套完整的製造執行系統，專為電子製造業設計，支援多公司架構，整合 ERP 系統，提供智能化的生產管理解決方案。

### 技術規範
- **開發語言**：Python 3.10+
- **Web 框架**：Django 5.1.8
- **資料庫**：PostgreSQL
- **快取系統**：Redis
- **任務佇列**：Celery
- **前端技術**：Bootstrap 5, Chart.js
- **AI/ML**：TensorFlow, Scikit-learn

---

## 二、系統架構設計規範

### 1. 多層式架構設計
```
┌─────────────────────────────────────┐
│           表現層 (Presentation)     │
│         Templates + Static Files    │
├─────────────────────────────────────┤
│           業務邏輯層 (Business)     │
│         Views + Services            │
├─────────────────────────────────────┤
│           資料存取層 (Data Access)  │
│         Models + Managers           │
├─────────────────────────────────────┤
│           資料層 (Data)             │
│         PostgreSQL + Redis          │
└─────────────────────────────────────┘
```

### 2. 模組化設計原則
- 每個功能模組獨立開發
- 模組間透過 API 介面溝通
- 共用功能抽取為服務層
- 遵循單一職責原則

---

## 三、目錄結構規範

### 專案根目錄結構
```
/var/www/mes/
├── mes_config/           # Django 設定檔
├── equip/               # 設備管理模組
├── smt_equipment/       # SMT 設備模組
├── material/            # 物料管理模組
├── process/             # 製程管理模組
├── scheduling/          # 排程管理模組
├── quality/             # 品質管理模組
├── ai/                  # AI 功能模組
├── erp_integration/     # ERP 整合模組
├── kanban/              # 看板模組
├── reporting/           # 報表模組
├── system/              # 系統管理模組
├── workorder/           # 工單管理模組
├── static/              # 靜態檔案
├── templates/           # 全域模板
├── requirements.txt     # 依賴套件
└── manage.py           # Django 管理工具
```

### 模組目錄結構規範
```
module_name/
├── __init__.py
├── models.py           # 資料模型
├── views.py            # 視圖邏輯
├── urls.py             # URL 路由
├── admin.py            # 管理介面
├── apps.py             # 應用程式設定
├── tests.py            # 測試檔案
├── utils.py            # 工具函數
├── services.py         # 業務邏輯服務
├── serializers.py      # API 序列化器
├── templates/          # 模板檔案
│   └── module_name/
└── static/             # 靜態檔案
    └── module_name/
```

---

## 四、資料庫設計規範

### 1. 命名規範
##- 資料表：小寫字母，單數形式，用底線分隔
##- 欄位：小寫字母，用底線分隔
##- 主鍵：統一使用 `id` 作為主鍵名稱
##- 外鍵：使用 `model_name_id` 格式

### 2. 資料表設計範例
```python
class Equipment(models.Model):
    """設備基本資訊表"""
    name = models.CharField(max_length=100, unique=True, verbose_name="設備名稱")
    model = models.CharField(max_length=100, blank=True, verbose_name="型號")
    created_at = models.DateTimeField(default=timezone.now, verbose_name="創建時間")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="更新時間")

    class Meta:
        verbose_name = "設備"
        verbose_name_plural = "設備"
        db_table = 'equipment'
        ordering = ['name']

    def __str__(self):
        return self.name
```

### 3. 多公司架構設計
```python
class CompanyConfig(models.Model):
    """公司配置表"""
    company_code = models.CharField(max_length=10, unique=True, verbose_name="公司代號")
    company_name = models.CharField(max_length=100, verbose_name="公司名稱")
    database = models.CharField(max_length=100, verbose_name="資料庫名稱")
    
    class Meta:
        verbose_name = "公司設定"
        verbose_name_plural = "公司設定"
```

---

## 五、程式碼開發規範

### 1. Python 程式碼規範
- 遵循 PEP 8 程式碼風格
- 使用 Black 進行程式碼格式化
- 函數和類別必須有 docstring
- 變數命名使用 snake_case
- 類別命名使用 PascalCase

### 2. Django 開發規範
```python
# views.py 範例
from django.views.generic import ListView, CreateView, UpdateView
from django.contrib.auth.mixins import LoginRequiredMixin
from django.urls import reverse_lazy
from .models import Equipment
from .forms import EquipmentForm

class EquipmentListView(LoginRequiredMixin, ListView):
    """設備列表視圖"""
    model = Equipment
    template_name = 'equip/equipment_list.html'
    context_object_name = 'equipments'
    paginate_by = 20

    def get_queryset(self):
        """取得查詢集"""
        queryset = super().get_queryset()
        # 加入搜尋功能
        search = self.request.GET.get('search')
        if search:
            queryset = queryset.filter(name__icontains=search)
        return queryset

class EquipmentCreateView(LoginRequiredMixin, CreateView):
    """設備新增視圖"""
    model = Equipment
    form_class = EquipmentForm
    template_name = 'equip/equipment_form.html'
    success_url = reverse_lazy('equip:equipment_list')
```

### 3. URL 路由規範
```python
# urls.py 範例
from django.urls import path
from . import views

app_name = 'equip'

urlpatterns = [
    path('', views.EquipmentListView.as_view(), name='equipment_list'),
    path('add/', views.EquipmentCreateView.as_view(), name='equipment_add'),
    path('edit/<int:pk>/', views.EquipmentUpdateView.as_view(), name='equipment_edit'),
    path('detail/<int:pk>/', views.EquipmentDetailView.as_view(), name='equipment_detail'),
    path('delete/<int:pk>/', views.EquipmentDeleteView.as_view(), name='equipment_delete'),
]
```

### 4. 表單設計規範
```python
# forms.py 範例
from django import forms
from .models import Equipment

class EquipmentForm(forms.ModelForm):
    """設備表單"""
    
    class Meta:
        model = Equipment
        fields = ['name', 'model', 'function_settings']
        widgets = {
            'name': forms.TextInput(attrs={'class': 'form-control'}),
            'model': forms.TextInput(attrs={'class': 'form-control'}),
            'function_settings': forms.Textarea(attrs={'class': 'form-control', 'rows': 3}),
        }

    def clean_name(self):
        """驗證設備名稱"""
        name = self.cleaned_data['name']
        if len(name) < 2:
            raise forms.ValidationError("設備名稱至少需要2個字元")
        return name
```

---

## 六、前端開發規範

### 1. HTML 模板規範
```html
<!-- 模板繼承結構 -->
{% extends 'base.html' %}
{% load static %}

{% block title %}設備管理{% endblock %}

{% block content %}
<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">設備列表</h3>
                    <div class="card-tools">
                        <a href="{% url 'equip:equipment_add' %}" class="btn btn-primary">
                            <i class="fas fa-plus"></i> 新增設備
                        </a>
                    </div>
                </div>
                <div class="card-body">
                    <!-- 內容區域 -->
                </div>
            </div>
        </div>
    </div>
</div>

{% endblock %}
```

### 2. CSS/JS 規範
- 使用 Bootstrap 5 樣式
- 客製化樣式請集中於 `static/module_name/` 目錄
- JavaScript 需模組化，避免全域污染


### 3. 圖表與看板
- 優先使用 Chart.js、Plotly 等開源圖表庫
- 圖表資料來源統一由 API 提供
- 看板頁面需支援自動刷新（建議使用 AJAX 或 WebSocket）

---

## 七、測試規範

### 1. 單元測試
- 每個 models、views、forms、utils 需有對應單元測試
- 測試檔案統一放於 `tests.py` 或 `tests/` 目錄
- 使用 Django TestCase 撰寫

### 2. 整合測試
- 針對跨模組流程（如 ERP 同步、AI 預測）設計整合測試
- 測試資料需可重複執行

### 3. 測試覆蓋率
- 目標覆蓋率 80% 以上
- 定期檢查測試結果並修正

---

## 八、版本控制與協作

- 使用 Git 進行版本管理
- 每個功能分支需以 `feature/模組名稱_功能` 命名
- 合併請求需經過 Code Review
- 重要變更需更新設計規範文件

---

## 九、文件與註解

- 每個模組需有 README.md，說明功能與使用方式
- 重要類別、函數需有繁體中文 docstring
- 程式碼中需有適量繁體中文註解，說明邏輯

---

## 十、部署與維護

- 開發、測試、生產環境需分離
-## 使用 Docker 容器化部署（如有需求）
- 定期備份資料庫
- 設置監控與警報機制

---

> 本文件為 MES 系統開發設計規範，請團隊成員遵循本規範進行開發、測試與維護，確保系統品質與可持續發展。 
## 設定檔統一管理規範

1. 全專案僅允許一份全局設定檔（mes_config/settings.py 或 .env），所有模組必須共用，不可各自建立。
2. 敏感資訊（密碼、金鑰）集中寫在 .env，由 settings.py 統一讀取。
3. 設定變更需全體知會，並經負責人審核，變更後需重啟相關服務。
4. 嚴禁私自新增/複製設定檔，有需求請先討論。
5. 新進人員必須閱讀本規範，照規定操作。