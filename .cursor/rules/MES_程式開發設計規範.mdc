---
alwaysApply: true
---
## 三、架構設計

### 1. 多層式架構

┌─────────────────────────────────────┐
│ 表現層 (Presentation) │
│ Templates + Static Files │
├─────────────────────────────────────┤
│ 業務邏輯層 (Business) │
│ Views + Services │
├─────────────────────────────────────┤
│ 資料存取層 (Data Access) │
│ Models + Managers │
├─────────────────────────────────────┤
│ 資料層 (Data) │
│ PostgreSQL + Redis │
└─────────────────────────────────────┘

yaml
複製
編輯

### 2. 模組化原則

- 每個功能模組獨立開發，禁止交叉存取未授權模組邏輯。
- 模組間僅透過 API 溝通。
- 共用邏輯應抽出至 `services.py` 或獨立模組。
- 遵循單一職責原則。
- **工單管理允許劃分為多個子模組（如：進行中工單、已完工工單、報工記錄等），以避免模組肥大造成維護困難。**

---

## 四、專案目錄結構

### 專案根目錄
/var/www/mes/
├── mes_config/ # 全域 Django 設定
├── equip/ # 設備管理模組
├── smt_equipment/ # SMT 設備模組
├── material/ # 物料管理模組
├── process/ # 製程管理模組
├── scheduling/ # 排程管理模組
├── quality/ # 品質管理模組
├── ai/ # AI 模組
├── erp_integration/ # ERP 整合模組
├── kanban/ # 看板模組
├── reporting/ # 報表模組
├── system/ # 系統管理模組
├── workorder/ # 工單主模組（可包含子模組）
├── static/ # 全域靜態檔案
├── templates/ # 全域模板
└── manage.py

shell
複製
編輯

### 模組內部結構
module_name/
├── init.py
├── models.py
├── views.py
├── urls.py
├── admin.py
├── apps.py
├── tests.py
├── utils.py
├── services.py
├── serializers.py
├── templates/
│ └── module_name/
└── static/
└── module_name/

yaml
複製
編輯

---

## 五、資料庫設計規範

- 資料表命名使用小寫、單數形式、底線分隔。
- 欄位命名使用小寫、底線分隔。
- 主鍵統一命名為 `id`。
- 外鍵命名使用 `related_model_id` 格式。
- 多公司架構支援依公司代號設定資料分離。

---

## 六、程式碼與 Django 開發規範

### 1. Python 規範
- 遵循 PEP 8 標準。
- 使用 `Black` 工具格式化程式碼。
- 函式與類別必須有 docstring（使用繁體中文）。
- 變數名稱使用 snake_case；類別使用 PascalCase。

### 2. Django 檔案分層
- `views.py` 僅作為商業邏輯入口，簡潔導向服務。
- `services.py` 封裝邏輯、處理複雜流程。
- `serializers.py` 負責 API 輸入輸出轉換。
- `forms.py` 僅處理 Django 表單與驗證。

### 3. URL 命名與路由規範
- 每模組需設定 `app_name`。
- 路由名稱清楚表達資源動作（如 `equipment_add`）。

---

## 七、前端開發規範

### 1. HTML 模板
- 所有頁面必須繼承自 `base.html`。
- 嚴禁修改非指定模板內容。
- 遵循 Django Template 語法與區塊結構。

### 2. JavaScript 規範
- 僅允許使用原生 JavaScript。
- 嚴禁使用 jQuery。
- 所有 JS 必須模組化，禁止污染全域作用域。
- 客製 JS 放置於 `static/module_name/` 內。

### 3. CSS 規範
- 使用 Bootstrap 5 樣式。
- 客製樣式請集中於 `static/module_name/`，避免汙染全域樣式。

### 4. 控制元件一致性
- 時間選擇器必須統一為作業員補登報工格式。

### 5. 圖表與看板
- 優先使用 Chart.js、Plotly。
- 圖表資料來源由 API 提供，不得寫死。
- 看板需支援自動刷新（AJAX 或 WebSocket）。

---

## 八、測試規範

- 每個模組必須撰寫單元測試與整合測試。
- 測試涵蓋 models、views、forms、utils。
- 測試檔放於 `tests.py` 或 `tests/` 資料夾中。
- 覆蓋率目標：80% 以上。

---

## 九、版本控制與協作規範

- 使用 Git 進行版本控制。
- 分支命名規則：`feature/模組_功能`。
- 所有 Pull Request 必須經過 Code Review。
- 文件與設計異動必須同步更新。

---

## 十、設定檔管理規範

1. 全專案僅允許一份設定檔（`mes_config/settings.py` 與 `.env`）。
2. 所有模組需共用統一設定，不可各自建立。
3. 敏感資訊集中於 `.env`，並由 `settings.py` 載入。
4. 設定變更須經審核、知會團隊後進行。
5. 嚴禁未經授權新增或複製設定檔。

---

## 十一、文件與註解

- 每個模組需有 `README.md`，說明功能與使用方式。
- 所有類別與函數須有繁體中文 docstring。
- 程式中需有必要註解輔助理解，避免硬編碼與魔法數值。

---

## 十二、部署與維護

- 明確區分開發、測試、正式環境。
- 建議使用 Docker 進行容器化部署（視需求）。
- 定期備份資料庫與日誌。
- 系統需設置監控與錯誤警報機制。

---

## 附註

> 本規範為 MES 系統開發與維運依據，所有團隊成員須嚴格遵守，違反者將不予合併或部署其提交內容。